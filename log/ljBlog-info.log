2025-01-18 09:02:48,227 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 09:02:48,232 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 09:02:53,648 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 26736 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 09:02:53,653 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 09:02:54,184 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 09:02:54,187 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 09:02:54,226 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-01-18 09:02:54,704 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 09:02:54,714 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 09:02:54,718 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 09:02:54,719 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 09:02:54,789 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 09:02:54,789 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1100 ms
2025-01-18 09:02:56,021 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 09:02:56,331 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 09:02:56,343 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 09:02:56,350 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 3.063 seconds (process running for 3.917)
2025-01-18 09:03:25,881 INFO  [http-nio-8085-exec-6] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 09:03:25,881 INFO  [http-nio-8085-exec-6] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 09:03:25,882 INFO  [http-nio-8085-exec-6] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 09:03:26,127 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：POST，Param：{}
2025-01-18 09:03:26,324 ERROR [http-nio-8085-exec-6] o.t.TemplateEngine.(): [THYMELEAF][http-nio-8085-exec-6] Exception processing template "test/error": Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1103) [thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1077) [thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.renderFragment(ThymeleafView.java:372) [thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.render(ThymeleafView.java:192) [thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) [spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) [tomcat-embed-core-10.1.31.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) [spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) [tomcat-embed-core-10.1.31.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) [tomcat-embed-websocket-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at java.base/java.lang.Thread.run(Thread.java:833) [?:?]
2025-01-18 09:03:26,326 ERROR [http-nio-8085-exec-6] o.a.c.c.C.[.[.[.[dispatcherServlet].(): Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1103) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1077) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.renderFragment(ThymeleafView.java:372) ~[thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.render(ThymeleafView.java:192) ~[thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.31.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.31.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at java.base/java.lang.Thread.run(Thread.java:833) [?:?]
2025-01-18 09:03:26,335 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：POST，Param：{}
2025-01-18 09:03:26,356 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：21毫秒
2025-01-18 09:04:29,449 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 09:04:33,392 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 35540 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 09:04:33,397 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 09:04:33,826 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 09:04:33,828 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 09:04:33,860 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-01-18 09:04:34,328 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 09:04:34,337 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 09:04:34,341 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 09:04:34,342 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 09:04:34,404 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 09:04:34,404 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 977 ms
2025-01-18 09:04:35,551 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 09:04:35,826 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 09:04:35,838 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 09:04:35,843 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.744 seconds (process running for 3.447)
2025-01-18 09:05:09,533 INFO  [http-nio-8085-exec-5] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 09:05:09,533 INFO  [http-nio-8085-exec-5] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 09:05:09,534 INFO  [http-nio-8085-exec-5] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 09:05:09,650 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：GET，Param：{}
2025-01-18 09:05:09,753 ERROR [http-nio-8085-exec-5] o.t.TemplateEngine.(): [THYMELEAF][http-nio-8085-exec-5] Exception processing template "test/error": Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1103) [thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1077) [thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.renderFragment(ThymeleafView.java:372) [thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.render(ThymeleafView.java:192) [thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) [spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) [tomcat-embed-core-10.1.31.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) [spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) [tomcat-embed-core-10.1.31.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) [tomcat-embed-websocket-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at java.base/java.lang.Thread.run(Thread.java:833) [?:?]
2025-01-18 09:05:09,753 ERROR [http-nio-8085-exec-5] o.a.c.c.C.[.[.[.[dispatcherServlet].(): Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1103) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1077) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.renderFragment(ThymeleafView.java:372) ~[thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.render(ThymeleafView.java:192) ~[thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.31.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.31.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at java.base/java.lang.Thread.run(Thread.java:833) [?:?]
2025-01-18 09:05:09,758 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：GET，Param：{}
2025-01-18 09:05:09,772 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：14毫秒
2025-01-18 09:06:41,568 WARN  [http-nio-8085-exec-4] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2025-01-18 09:06:41,569 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：GET，Param：{}
2025-01-18 09:06:41,569 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：0毫秒
2025-01-18 09:06:45,848 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：POST，Param：{}
2025-01-18 09:06:45,950 INFO  [http-nio-8085-exec-6] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 09:06:46,121 INFO  [http-nio-8085-exec-6] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 09:06:46,185 INFO  [http-nio-8085-exec-6] sys-sql.(): 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@7330e1d1, param1=null, param2=com.lj.blog.common.result.PageRequest@7330e1d1}
2025-01-18 09:06:46,185 INFO  [http-nio-8085-exec-6] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit
2025-01-18 09:06:46,188 INFO  [http-nio-8085-exec-6] sys-sql.(): [93m使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 09:06:46,267 INFO  [http-nio-8085-exec-6] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:06:46,267 INFO  [http-nio-8085-exec-6] sys-sql.(): 方法: query
2025-01-18 09:06:46,267 INFO  [http-nio-8085-exec-6] sys-sql.(): 执行时间: 77 ms
2025-01-18 09:06:46,267 INFO  [http-nio-8085-exec-6] sys-sql.(): ========================================[0m
2025-01-18 09:06:46,268 INFO  [http-nio-8085-exec-6] sys-sql.(): 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 09:06:46,269 INFO  [http-nio-8085-exec-6] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds
2025-01-18 09:06:46,269 INFO  [http-nio-8085-exec-6] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 09:06:46,276 INFO  [http-nio-8085-exec-6] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:06:46,276 INFO  [http-nio-8085-exec-6] sys-sql.(): 方法: query
2025-01-18 09:06:46,276 INFO  [http-nio-8085-exec-6] sys-sql.(): 执行时间: 7 ms
2025-01-18 09:06:46,276 INFO  [http-nio-8085-exec-6] sys-sql.(): ========================================[0m
2025-01-18 09:06:46,277 INFO  [http-nio-8085-exec-6] sys-sql.(): 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}
2025-01-18 09:06:46,277 INFO  [http-nio-8085-exec-6] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds
2025-01-18 09:06:46,277 INFO  [http-nio-8085-exec-6] sys-sql.(): [93m使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 09:06:46,283 INFO  [http-nio-8085-exec-6] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:06:46,283 INFO  [http-nio-8085-exec-6] sys-sql.(): 方法: query
2025-01-18 09:06:46,283 INFO  [http-nio-8085-exec-6] sys-sql.(): 执行时间: 6 ms
2025-01-18 09:06:46,283 INFO  [http-nio-8085-exec-6] sys-sql.(): ========================================[0m
2025-01-18 09:06:46,284 INFO  [http-nio-8085-exec-6] sys-sql.(): 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}
2025-01-18 09:06:46,284 INFO  [http-nio-8085-exec-6] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds
2025-01-18 09:06:46,284 INFO  [http-nio-8085-exec-6] sys-sql.(): [93m使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 09:06:46,291 INFO  [http-nio-8085-exec-6] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:06:46,291 INFO  [http-nio-8085-exec-6] sys-sql.(): 方法: query
2025-01-18 09:06:46,291 INFO  [http-nio-8085-exec-6] sys-sql.(): 执行时间: 6 ms
2025-01-18 09:06:46,291 INFO  [http-nio-8085-exec-6] sys-sql.(): ========================================[0m
2025-01-18 09:06:46,292 INFO  [http-nio-8085-exec-6] sys-sql.(): 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 09:06:46,292 INFO  [http-nio-8085-exec-6] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds
2025-01-18 09:06:46,292 INFO  [http-nio-8085-exec-6] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 09:06:46,297 INFO  [http-nio-8085-exec-6] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:06:46,297 INFO  [http-nio-8085-exec-6] sys-sql.(): 方法: query
2025-01-18 09:06:46,297 INFO  [http-nio-8085-exec-6] sys-sql.(): 执行时间: 4 ms
2025-01-18 09:06:46,297 INFO  [http-nio-8085-exec-6] sys-sql.(): ========================================[0m
2025-01-18 09:06:46,299 INFO  [http-nio-8085-exec-6] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 09:06:46,323 INFO  [http-nio-8085-exec-6] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 09:06:46,328 INFO  [http-nio-8085-exec-6] sys-sql.(): 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)
2025-01-18 09:06:46,332 INFO  [http-nio-8085-exec-6] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count
2025-01-18 09:06:46,332 INFO  [http-nio-8085-exec-6] sys-sql.(): [93m使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 09:06:46,335 INFO  [http-nio-8085-exec-6] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:06:46,335 INFO  [http-nio-8085-exec-6] sys-sql.(): 方法: query
2025-01-18 09:06:46,335 INFO  [http-nio-8085-exec-6] sys-sql.(): 执行时间: 2 ms
2025-01-18 09:06:46,335 INFO  [http-nio-8085-exec-6] sys-sql.(): ========================================[0m
2025-01-18 09:06:46,346 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：498毫秒
2025-01-18 09:07:08,424 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 09:07:08,428 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 09:07:12,704 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 24392 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 09:07:12,710 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 09:07:13,168 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 09:07:13,170 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 09:07:13,209 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 26 ms. Found 0 Redis repository interfaces.
2025-01-18 09:07:13,656 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 09:07:13,667 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 09:07:13,673 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 09:07:13,673 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 09:07:13,754 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 09:07:13,754 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1011 ms
2025-01-18 09:07:15,013 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 09:07:15,277 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 09:07:15,294 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 09:07:15,298 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.857 seconds (process running for 3.514)
2025-01-18 09:07:25,878 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 09:07:25,878 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 09:07:25,880 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 2 ms
2025-01-18 09:07:25,900 WARN  [http-nio-8085-exec-1] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2025-01-18 09:07:26,061 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：POST，Param：{}
2025-01-18 09:07:26,088 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：174毫秒
2025-01-18 09:07:29,190 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：GET，Param：{}
2025-01-18 09:07:29,355 ERROR [http-nio-8085-exec-3] o.t.TemplateEngine.(): [THYMELEAF][http-nio-8085-exec-3] Exception processing template "test/error": Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1103) [thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1077) [thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.renderFragment(ThymeleafView.java:372) [thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.render(ThymeleafView.java:192) [thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) [spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) [tomcat-embed-core-10.1.31.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) [spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) [tomcat-embed-core-10.1.31.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) [tomcat-embed-websocket-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at java.base/java.lang.Thread.run(Thread.java:833) [?:?]
2025-01-18 09:07:29,356 ERROR [http-nio-8085-exec-3] o.a.c.c.C.[.[.[.[dispatcherServlet].(): Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1103) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1077) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.renderFragment(ThymeleafView.java:372) ~[thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.render(ThymeleafView.java:192) ~[thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.31.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.31.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at java.base/java.lang.Thread.run(Thread.java:833) [?:?]
2025-01-18 09:07:29,357 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：GET，Param：{}
2025-01-18 09:07:29,357 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：0毫秒
2025-01-18 09:07:56,512 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：GET，Param：{}
2025-01-18 09:07:56,513 ERROR [http-nio-8085-exec-5] o.t.TemplateEngine.(): [THYMELEAF][http-nio-8085-exec-5] Exception processing template "test/error": Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1103) [thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1077) [thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.renderFragment(ThymeleafView.java:372) [thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.render(ThymeleafView.java:192) [thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) [spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) [spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) [tomcat-embed-core-10.1.31.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) [spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) [tomcat-embed-core-10.1.31.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) [tomcat-embed-websocket-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at java.base/java.lang.Thread.run(Thread.java:833) [?:?]
2025-01-18 09:07:56,513 ERROR [http-nio-8085-exec-5] o.a.c.c.C.[.[.[.[dispatcherServlet].(): Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause
org.thymeleaf.exceptions.TemplateInputException: Error resolving template [test/error], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1103) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1077) ~[thymeleaf-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.renderFragment(ThymeleafView.java:372) ~[thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.thymeleaf.spring6.view.ThymeleafView.render(ThymeleafView.java:192) ~[thymeleaf-spring6-3.1.2.RELEASE.jar:3.1.2.RELEASE]
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1432) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1168) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.31.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.14.jar:6.1.14]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.31.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.14.jar:6.1.14]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.14.jar:6.1.14]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.31.jar:10.1.31]
	at java.base/java.lang.Thread.run(Thread.java:833) [?:?]
2025-01-18 09:07:56,514 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：GET，Param：{}
2025-01-18 09:07:56,514 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：0毫秒
2025-01-18 09:12:44,315 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 1624 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 09:12:44,319 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 09:12:44,762 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 09:12:44,764 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 09:12:44,794 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 20 ms. Found 0 Redis repository interfaces.
2025-01-18 09:12:45,232 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 09:12:45,246 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 09:12:45,251 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 09:12:45,251 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 09:12:45,339 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 09:12:45,339 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 990 ms
2025-01-18 09:12:46,549 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 09:12:46,820 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 09:12:46,834 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 09:12:46,840 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.836 seconds (process running for 3.54)
2025-01-18 09:12:55,320 INFO  [http-nio-8085-exec-2] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 09:12:55,320 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 09:12:55,320 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Completed initialization in 0 ms
2025-01-18 09:12:55,426 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): 请求的URI：null，Method：GET，Param：{}
2025-01-18 09:12:55,460 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：129毫秒
2025-01-18 09:16:01,353 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 09:16:05,263 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 32228 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 09:16:05,268 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 09:16:05,768 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 09:16:05,770 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 09:16:05,804 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-01-18 09:16:06,176 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 09:16:06,184 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 09:16:06,189 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 09:16:06,190 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 09:16:06,253 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 09:16:06,253 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 949 ms
2025-01-18 09:16:07,406 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 09:16:07,768 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 09:16:07,791 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 09:16:07,799 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.831 seconds (process running for 3.507)
2025-01-18 09:16:33,919 INFO  [http-nio-8085-exec-2] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 09:16:33,919 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 09:16:33,920 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 09:16:33,938 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): 收到请求 - URI: /test/error, Method: GET, Params: {}
2025-01-18 09:16:33,972 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：37毫秒
2025-01-18 09:23:11,265 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 09:23:15,416 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 44404 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 09:23:15,421 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 09:23:15,860 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 09:23:15,864 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 09:23:15,900 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2025-01-18 09:23:16,337 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 09:23:16,346 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 09:23:16,350 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 09:23:16,350 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 09:23:16,417 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 09:23:16,417 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 967 ms
2025-01-18 09:23:17,607 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 09:23:17,881 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 09:23:17,895 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 09:23:17,900 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.757 seconds (process running for 3.606)
2025-01-18 09:24:44,001 INFO  [http-nio-8085-exec-2] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 09:24:44,001 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 09:24:44,002 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 09:24:44,014 WARN  [http-nio-8085-exec-2] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2025-01-18 09:24:44,024 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): 收到请求 - URI: /error, Method: GET, Params: {}
2025-01-18 09:24:44,042 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：19毫秒
2025-01-18 09:25:18,338 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.GlobalInterceptor.(): 收到请求 - URI: /home/articles, Method: POST, Params: {}
2025-01-18 09:25:18,462 INFO  [http-nio-8085-exec-4] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 09:25:18,795 INFO  [http-nio-8085-exec-4] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 09:25:18,844 INFO  [http-nio-8085-exec-4] sys-sql.(): 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@55f81601, param1=null, param2=com.lj.blog.common.result.PageRequest@55f81601}
2025-01-18 09:25:18,846 INFO  [http-nio-8085-exec-4] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit
2025-01-18 09:25:18,847 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 09:25:18,924 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:25:18,924 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 09:25:18,924 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 76 ms
2025-01-18 09:25:18,924 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 09:25:18,927 INFO  [http-nio-8085-exec-4] sys-sql.(): 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 09:25:18,927 INFO  [http-nio-8085-exec-4] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds
2025-01-18 09:25:18,927 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 09:25:18,945 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:25:18,945 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 09:25:18,945 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 16 ms
2025-01-18 09:25:18,945 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 09:25:18,946 INFO  [http-nio-8085-exec-4] sys-sql.(): 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}
2025-01-18 09:25:18,946 INFO  [http-nio-8085-exec-4] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds
2025-01-18 09:25:18,946 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 09:25:18,951 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:25:18,951 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 09:25:18,951 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 5 ms
2025-01-18 09:25:18,951 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 09:25:18,953 INFO  [http-nio-8085-exec-4] sys-sql.(): 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}
2025-01-18 09:25:18,953 INFO  [http-nio-8085-exec-4] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds
2025-01-18 09:25:18,953 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 09:25:18,958 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:25:18,958 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 09:25:18,958 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 5 ms
2025-01-18 09:25:18,958 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 09:25:18,959 INFO  [http-nio-8085-exec-4] sys-sql.(): 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 09:25:18,959 INFO  [http-nio-8085-exec-4] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds
2025-01-18 09:25:18,959 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 09:25:18,962 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:25:18,962 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 09:25:18,962 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 3 ms
2025-01-18 09:25:18,962 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 09:25:18,964 INFO  [http-nio-8085-exec-4] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 09:25:18,988 INFO  [http-nio-8085-exec-4] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 09:25:18,992 INFO  [http-nio-8085-exec-4] sys-sql.(): 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)
2025-01-18 09:25:18,996 INFO  [http-nio-8085-exec-4] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count
2025-01-18 09:25:18,996 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 09:25:18,999 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:25:18,999 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 09:25:18,999 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 3 ms
2025-01-18 09:25:18,999 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 09:25:19,013 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行了：675毫秒
2025-01-18 09:31:09,293 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 09:31:09,301 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 09:31:13,503 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 34268 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 09:31:13,508 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 09:31:13,913 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 09:31:13,915 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 09:31:13,941 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 18 ms. Found 0 Redis repository interfaces.
2025-01-18 09:31:14,323 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 09:31:14,332 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 09:31:14,336 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 09:31:14,337 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 09:31:14,398 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 09:31:14,398 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 859 ms
2025-01-18 09:31:15,564 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 09:31:15,892 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 09:31:15,910 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 09:31:15,917 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.701 seconds (process running for 3.383)
2025-01-18 09:31:37,836 INFO  [http-nio-8085-exec-2] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 09:31:37,836 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 09:31:37,838 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Completed initialization in 2 ms
2025-01-18 09:31:37,856 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): [31m >>>> 收到请求 - URI: /home/articles, Method: POST, Params: {}
2025-01-18 09:31:37,991 INFO  [http-nio-8085-exec-2] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 09:31:38,296 INFO  [http-nio-8085-exec-2] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 09:31:38,339 INFO  [http-nio-8085-exec-2] sys-sql.(): 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@6efaa420, param1=null, param2=com.lj.blog.common.result.PageRequest@6efaa420}
2025-01-18 09:31:38,339 INFO  [http-nio-8085-exec-2] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit
2025-01-18 09:31:38,340 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 09:31:38,415 INFO  [http-nio-8085-exec-2] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:31:38,415 INFO  [http-nio-8085-exec-2] sys-sql.(): 方法: query
2025-01-18 09:31:38,415 INFO  [http-nio-8085-exec-2] sys-sql.(): 执行时间: 73 ms
2025-01-18 09:31:38,415 INFO  [http-nio-8085-exec-2] sys-sql.(): ========================================[0m
2025-01-18 09:31:38,417 INFO  [http-nio-8085-exec-2] sys-sql.(): 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 09:31:38,417 INFO  [http-nio-8085-exec-2] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds
2025-01-18 09:31:38,417 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 09:31:38,426 INFO  [http-nio-8085-exec-2] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:31:38,426 INFO  [http-nio-8085-exec-2] sys-sql.(): 方法: query
2025-01-18 09:31:38,426 INFO  [http-nio-8085-exec-2] sys-sql.(): 执行时间: 9 ms
2025-01-18 09:31:38,426 INFO  [http-nio-8085-exec-2] sys-sql.(): ========================================[0m
2025-01-18 09:31:38,427 INFO  [http-nio-8085-exec-2] sys-sql.(): 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}
2025-01-18 09:31:38,427 INFO  [http-nio-8085-exec-2] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds
2025-01-18 09:31:38,428 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 09:31:38,432 INFO  [http-nio-8085-exec-2] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:31:38,432 INFO  [http-nio-8085-exec-2] sys-sql.(): 方法: query
2025-01-18 09:31:38,432 INFO  [http-nio-8085-exec-2] sys-sql.(): 执行时间: 4 ms
2025-01-18 09:31:38,432 INFO  [http-nio-8085-exec-2] sys-sql.(): ========================================[0m
2025-01-18 09:31:38,433 INFO  [http-nio-8085-exec-2] sys-sql.(): 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}
2025-01-18 09:31:38,433 INFO  [http-nio-8085-exec-2] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds
2025-01-18 09:31:38,433 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 09:31:38,440 INFO  [http-nio-8085-exec-2] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:31:38,440 INFO  [http-nio-8085-exec-2] sys-sql.(): 方法: query
2025-01-18 09:31:38,440 INFO  [http-nio-8085-exec-2] sys-sql.(): 执行时间: 6 ms
2025-01-18 09:31:38,440 INFO  [http-nio-8085-exec-2] sys-sql.(): ========================================[0m
2025-01-18 09:31:38,441 INFO  [http-nio-8085-exec-2] sys-sql.(): 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 09:31:38,441 INFO  [http-nio-8085-exec-2] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds
2025-01-18 09:31:38,441 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 09:31:38,445 INFO  [http-nio-8085-exec-2] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:31:38,445 INFO  [http-nio-8085-exec-2] sys-sql.(): 方法: query
2025-01-18 09:31:38,445 INFO  [http-nio-8085-exec-2] sys-sql.(): 执行时间: 3 ms
2025-01-18 09:31:38,445 INFO  [http-nio-8085-exec-2] sys-sql.(): ========================================[0m
2025-01-18 09:31:38,447 INFO  [http-nio-8085-exec-2] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 09:31:38,472 INFO  [http-nio-8085-exec-2] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 09:31:38,477 INFO  [http-nio-8085-exec-2] sys-sql.(): 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)
2025-01-18 09:31:38,480 INFO  [http-nio-8085-exec-2] sys-sql.(): 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count
2025-01-18 09:31:38,480 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 09:31:38,483 INFO  [http-nio-8085-exec-2] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:31:38,483 INFO  [http-nio-8085-exec-2] sys-sql.(): 方法: query
2025-01-18 09:31:38,483 INFO  [http-nio-8085-exec-2] sys-sql.(): 执行时间: 2 ms
2025-01-18 09:31:38,483 INFO  [http-nio-8085-exec-2] sys-sql.(): ========================================[0m
2025-01-18 09:31:38,515 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m >>> 执行了：660毫秒
2025-01-18 09:35:40,904 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 09:35:40,908 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 09:35:45,978 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 35832 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 09:35:45,984 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 09:35:46,388 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 09:35:46,390 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 09:35:46,418 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-01-18 09:35:46,809 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 09:35:46,817 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 09:35:46,822 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 09:35:46,823 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 09:35:46,891 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 09:35:46,891 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 876 ms
2025-01-18 09:35:48,070 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 09:35:48,336 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 09:35:48,348 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 09:35:48,354 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.686 seconds (process running for 3.386)
2025-01-18 09:35:56,405 INFO  [http-nio-8085-exec-5] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 09:35:56,405 INFO  [http-nio-8085-exec-5] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 09:35:56,407 INFO  [http-nio-8085-exec-5] o.s.w.s.DispatcherServlet.(): Completed initialization in 2 ms
2025-01-18 09:35:56,420 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.GlobalInterceptor.(): [96m >>>> 收到请求 - URI: /home/articles, Method: POST, Params: {}
2025-01-18 09:35:56,502 INFO  [http-nio-8085-exec-5] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 09:35:56,680 INFO  [http-nio-8085-exec-5] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 09:35:56,707 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@6ce4fc8a, param1=null, param2=com.lj.blog.common.result.PageRequest@6ce4fc8a}
2025-01-18 09:35:56,707 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit
2025-01-18 09:35:56,708 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 09:35:56,754 INFO  [http-nio-8085-exec-5] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:35:56,754 INFO  [http-nio-8085-exec-5] sys-sql.(): 方法: query
2025-01-18 09:35:56,754 INFO  [http-nio-8085-exec-5] sys-sql.(): 执行时间: 45 ms
2025-01-18 09:35:56,754 INFO  [http-nio-8085-exec-5] sys-sql.(): ========================================[0m
2025-01-18 09:35:56,755 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 09:35:56,755 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds
2025-01-18 09:35:56,756 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 09:35:56,761 INFO  [http-nio-8085-exec-5] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:35:56,761 INFO  [http-nio-8085-exec-5] sys-sql.(): 方法: query
2025-01-18 09:35:56,761 INFO  [http-nio-8085-exec-5] sys-sql.(): 执行时间: 5 ms
2025-01-18 09:35:56,761 INFO  [http-nio-8085-exec-5] sys-sql.(): ========================================[0m
2025-01-18 09:35:56,762 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}
2025-01-18 09:35:56,762 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds
2025-01-18 09:35:56,762 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 09:35:56,766 INFO  [http-nio-8085-exec-5] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:35:56,766 INFO  [http-nio-8085-exec-5] sys-sql.(): 方法: query
2025-01-18 09:35:56,766 INFO  [http-nio-8085-exec-5] sys-sql.(): 执行时间: 4 ms
2025-01-18 09:35:56,766 INFO  [http-nio-8085-exec-5] sys-sql.(): ========================================[0m
2025-01-18 09:35:56,767 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}
2025-01-18 09:35:56,767 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds
2025-01-18 09:35:56,767 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 09:35:56,770 INFO  [http-nio-8085-exec-5] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:35:56,770 INFO  [http-nio-8085-exec-5] sys-sql.(): 方法: query
2025-01-18 09:35:56,770 INFO  [http-nio-8085-exec-5] sys-sql.(): 执行时间: 3 ms
2025-01-18 09:35:56,770 INFO  [http-nio-8085-exec-5] sys-sql.(): ========================================[0m
2025-01-18 09:35:56,772 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 09:35:56,772 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds
2025-01-18 09:35:56,772 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 09:35:56,774 INFO  [http-nio-8085-exec-5] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:35:56,774 INFO  [http-nio-8085-exec-5] sys-sql.(): 方法: query
2025-01-18 09:35:56,774 INFO  [http-nio-8085-exec-5] sys-sql.(): 执行时间: 2 ms
2025-01-18 09:35:56,774 INFO  [http-nio-8085-exec-5] sys-sql.(): ========================================[0m
2025-01-18 09:35:56,775 INFO  [http-nio-8085-exec-5] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 09:35:56,788 INFO  [http-nio-8085-exec-5] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 09:35:56,791 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)
2025-01-18 09:35:56,792 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count
2025-01-18 09:35:56,792 INFO  [http-nio-8085-exec-5] sys-sql.(): [93m使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 09:35:56,795 INFO  [http-nio-8085-exec-5] sys-sql.(): [32mSQL 执行时间:
2025-01-18 09:35:56,795 INFO  [http-nio-8085-exec-5] sys-sql.(): 方法: query
2025-01-18 09:35:56,795 INFO  [http-nio-8085-exec-5] sys-sql.(): 执行时间: 2 ms
2025-01-18 09:35:56,795 INFO  [http-nio-8085-exec-5] sys-sql.(): ========================================[0m
2025-01-18 09:35:56,806 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m >>> 执行了：387毫秒
2025-01-18 11:09:45,497 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): [96m >>>> 收到请求 - URI: /home/sentences, Method: GET, Params: {}
2025-01-18 11:09:45,647 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m >>>> 参数 = BlogContentItems(id=null, type=null, content=null, createTime=null, updateTime=null, isDeleted=0)
2025-01-18 11:09:45,659 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogContentItemsDao.queryPrimary
2025-01-18 11:09:45,660 INFO  [http-nio-8085-exec-2] sys-sql.(): [93m使用的完整的SQL:
select * from blog_c ontent_items[0m
2025-01-18 11:09:45,662 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.GlobalInterceptor.(): [96m >>>> 收到请求 - URI: /home/articles, Method: POST, Params: {}
2025-01-18 11:09:45,826 INFO  [http-nio-8085-exec-4] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 11:09:45,831 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@1ef8299f, param1=null, param2=com.lj.blog.common.result.PageRequest@1ef8299f}
2025-01-18 11:09:45,833 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit
2025-01-18 11:09:45,834 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 11:09:45,846 INFO  [http-nio-8085-exec-2] sys-sql.(): [32mSQL 执行时间:
2025-01-18 11:09:45,846 INFO  [http-nio-8085-exec-2] sys-sql.(): 方法: query
2025-01-18 11:09:45,846 INFO  [http-nio-8085-exec-2] sys-sql.(): 执行时间: 186 ms
2025-01-18 11:09:45,846 INFO  [http-nio-8085-exec-2] sys-sql.(): ========================================[0m
2025-01-18 11:09:45,873 INFO  [http-nio-8085-exec-2] c.l.b.d.s.i.BlogContentItemsDomainServiceImp.(): BlogContentItemsDomainServiceImp.getAllSentences.boList:[{"content":"Wonder your life","type":1},{"content":"探索编程的无限可能","type":0},{"content":"Together, We Can Achieve More","type":0},{"content":"Success Starts with Self-Belief","type":0},{"content":"Every Day is a New Opportunity","type":0},{"content":"Turn Your Dreams into Plans","type":0},{"content":"用代码改变世界","type":0},{"content":"ljBlog. All Rights Reserved. 版权所有","type":2},{"content":"在 技术的海洋中探索前行，分享知识的乐趣，共同成长的喜悦","type":3}]
2025-01-18 11:09:45,879 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 11:09:45,879 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 11:09:45,879 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 31 ms
2025-01-18 11:09:45,879 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 11:09:45,887 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 11:09:45,887 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds
2025-01-18 11:09:45,888 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 11:09:45,891 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m >>> 执行了：420毫秒
2025-01-18 11:09:45,932 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 11:09:45,932 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 11:09:45,933 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 43 ms
2025-01-18 11:09:45,933 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 11:09:45,936 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}
2025-01-18 11:09:45,936 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds
2025-01-18 11:09:45,937 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 11:09:45,953 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 11:09:45,953 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 11:09:45,953 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 15 ms
2025-01-18 11:09:45,953 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 11:09:45,956 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}
2025-01-18 11:09:45,956 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds
2025-01-18 11:09:45,957 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 11:09:45,976 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 11:09:45,976 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 11:09:45,976 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 19 ms
2025-01-18 11:09:45,976 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 11:09:45,977 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 11:09:45,977 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds
2025-01-18 11:09:45,978 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 11:09:45,990 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 11:09:45,990 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 11:09:45,990 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 11 ms
2025-01-18 11:09:45,990 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 11:09:45,992 INFO  [http-nio-8085-exec-4] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 11:09:45,999 INFO  [http-nio-8085-exec-4] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 11:09:46,002 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)
2025-01-18 11:09:46,002 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count
2025-01-18 11:09:46,003 INFO  [http-nio-8085-exec-4] sys-sql.(): [93m使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 11:09:46,010 INFO  [http-nio-8085-exec-4] sys-sql.(): [32mSQL 执行时间:
2025-01-18 11:09:46,010 INFO  [http-nio-8085-exec-4] sys-sql.(): 方法: query
2025-01-18 11:09:46,010 INFO  [http-nio-8085-exec-4] sys-sql.(): 执行时间: 7 ms
2025-01-18 11:09:46,010 INFO  [http-nio-8085-exec-4] sys-sql.(): ========================================[0m
2025-01-18 11:09:46,012 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m >>> 执行了：351毫秒
2025-01-18 13:26:30,483 INFO  [http-nio-8085-exec-8] c.l.b.a.c.i.GlobalInterceptor.(): [96m >>>> 收到请求 - URI: /home/articles, Method: POST, Params: {}
2025-01-18 13:26:30,520 INFO  [http-nio-8085-exec-8] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 13:26:30,529 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@48a3d4c7, param1=null, param2=com.lj.blog.common.result.PageRequest@48a3d4c7}
2025-01-18 13:26:30,530 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit
2025-01-18 13:26:30,530 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 13:26:30,541 INFO  [http-nio-8085-exec-8] sys-sql.(): [32mSQL 执行时间:
2025-01-18 13:26:30,541 INFO  [http-nio-8085-exec-8] sys-sql.(): 方法: query
2025-01-18 13:26:30,541 INFO  [http-nio-8085-exec-8] sys-sql.(): 执行时间: 9 ms
2025-01-18 13:26:30,541 INFO  [http-nio-8085-exec-8] sys-sql.(): ========================================[0m
2025-01-18 13:26:30,542 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 13:26:30,542 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds
2025-01-18 13:26:30,542 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 13:26:30,549 INFO  [http-nio-8085-exec-8] sys-sql.(): [32mSQL 执行时间:
2025-01-18 13:26:30,549 INFO  [http-nio-8085-exec-8] sys-sql.(): 方法: query
2025-01-18 13:26:30,549 INFO  [http-nio-8085-exec-8] sys-sql.(): 执行时间: 6 ms
2025-01-18 13:26:30,549 INFO  [http-nio-8085-exec-8] sys-sql.(): ========================================[0m
2025-01-18 13:26:30,549 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}
2025-01-18 13:26:30,549 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds
2025-01-18 13:26:30,549 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 13:26:30,566 INFO  [http-nio-8085-exec-8] sys-sql.(): [32mSQL 执行时间:
2025-01-18 13:26:30,566 INFO  [http-nio-8085-exec-8] sys-sql.(): 方法: query
2025-01-18 13:26:30,566 INFO  [http-nio-8085-exec-8] sys-sql.(): 执行时间: 16 ms
2025-01-18 13:26:30,566 INFO  [http-nio-8085-exec-8] sys-sql.(): ========================================[0m
2025-01-18 13:26:30,567 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}
2025-01-18 13:26:30,567 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds
2025-01-18 13:26:30,567 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 13:26:30,572 INFO  [http-nio-8085-exec-8] sys-sql.(): [32mSQL 执行时间:
2025-01-18 13:26:30,572 INFO  [http-nio-8085-exec-8] sys-sql.(): 方法: query
2025-01-18 13:26:30,572 INFO  [http-nio-8085-exec-8] sys-sql.(): 执行时间: 4 ms
2025-01-18 13:26:30,572 INFO  [http-nio-8085-exec-8] sys-sql.(): ========================================[0m
2025-01-18 13:26:30,573 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}
2025-01-18 13:26:30,575 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds
2025-01-18 13:26:30,575 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 13:26:30,578 INFO  [http-nio-8085-exec-8] sys-sql.(): [32mSQL 执行时间:
2025-01-18 13:26:30,578 INFO  [http-nio-8085-exec-8] sys-sql.(): 方法: query
2025-01-18 13:26:30,578 INFO  [http-nio-8085-exec-8] sys-sql.(): 执行时间: 3 ms
2025-01-18 13:26:30,578 INFO  [http-nio-8085-exec-8] sys-sql.(): ========================================[0m
2025-01-18 13:26:30,578 INFO  [http-nio-8085-exec-8] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 13:26:30,581 INFO  [http-nio-8085-exec-8] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 13:26:30,583 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)
2025-01-18 13:26:30,583 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m >>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count
2025-01-18 13:26:30,584 INFO  [http-nio-8085-exec-8] sys-sql.(): [93m使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 13:26:30,585 INFO  [http-nio-8085-exec-8] sys-sql.(): [32mSQL 执行时间:
2025-01-18 13:26:30,585 INFO  [http-nio-8085-exec-8] sys-sql.(): 方法: query
2025-01-18 13:26:30,585 INFO  [http-nio-8085-exec-8] sys-sql.(): 执行时间: 1 ms
2025-01-18 13:26:30,585 INFO  [http-nio-8085-exec-8] sys-sql.(): ========================================[0m
2025-01-18 13:26:30,586 INFO  [http-nio-8085-exec-8] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m >>> 执行了：105毫秒
2025-01-18 13:40:14,428 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 13:40:14,439 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 13:40:24,466 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 36616 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 13:40:24,472 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 13:40:25,096 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 13:40:25,099 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 13:40:25,138 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 23 ms. Found 0 Redis repository interfaces.
2025-01-18 13:40:25,694 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 13:40:25,705 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 13:40:25,713 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 13:40:25,713 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 13:40:25,804 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 13:40:25,804 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1299 ms
2025-01-18 13:40:27,163 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 13:40:27,539 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 13:40:27,551 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 13:40:27,557 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 3.429 seconds (process running for 4.477)
2025-01-18 13:40:32,447 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 13:40:32,447 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 13:40:32,447 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 0 ms
2025-01-18 13:40:32,464 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /home/articlesMethod: POSTParams: {}[0m
2025-01-18 13:40:32,578 INFO  [http-nio-8085-exec-1] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 13:40:32,874 INFO  [http-nio-8085-exec-1] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 13:40:32,924 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@64c8a27d, param1=null, param2=com.lj.blog.common.result.PageRequest@64c8a27d}[0m
2025-01-18 13:40:32,924 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit[0m
2025-01-18 13:40:32,926 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 13:40:32,980 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:40:32,980 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:40:32,980 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 53 ms
2025-01-18 13:40:32,980 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:40:32,981 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 13:40:32,981 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds[0m
2025-01-18 13:40:32,981 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 13:40:32,988 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:40:32,988 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:40:32,988 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 6 ms
2025-01-18 13:40:32,988 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:40:32,989 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}[0m
2025-01-18 13:40:32,989 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds[0m
2025-01-18 13:40:32,989 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 13:40:32,993 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:40:32,993 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:40:32,993 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 4 ms
2025-01-18 13:40:32,993 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:40:32,994 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}[0m
2025-01-18 13:40:32,994 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds[0m
2025-01-18 13:40:32,994 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 13:40:32,998 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:40:32,998 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:40:32,998 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 13:40:32,998 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:40:32,998 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 13:40:32,998 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds[0m
2025-01-18 13:40:32,998 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 13:40:33,001 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:40:33,001 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:40:33,001 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 3 ms
2025-01-18 13:40:33,001 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:40:33,003 INFO  [http-nio-8085-exec-1] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 13:40:33,018 INFO  [http-nio-8085-exec-1] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 13:40:33,027 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)[0m
2025-01-18 13:40:33,027 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count[0m
2025-01-18 13:40:33,027 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 13:40:33,029 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:40:33,029 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:40:33,029 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 13:40:33,029 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:40:33,051 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：589毫秒[0m
2025-01-18 13:53:09,196 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 13:53:09,204 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 13:53:14,029 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 316 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 13:53:14,034 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 13:53:14,529 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 13:53:14,530 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 13:53:14,561 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-01-18 13:53:14,983 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 13:53:14,993 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 13:53:15,000 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 13:53:15,000 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 13:53:15,090 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 13:53:15,090 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1023 ms
2025-01-18 13:53:16,359 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 13:53:16,666 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 13:53:16,684 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 13:53:16,689 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.994 seconds (process running for 3.758)
2025-01-18 13:53:42,411 INFO  [http-nio-8085-exec-2] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 13:53:42,412 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 13:53:42,413 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 13:53:42,429 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.ValidLoginInterceptor.(): saToken为：ahfdiudhwiuhdewuhwiouwheiu
2025-01-18 13:53:42,430 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /home/articles Method: POST Params: {}[0m
2025-01-18 13:53:42,543 INFO  [http-nio-8085-exec-2] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 13:53:42,818 INFO  [http-nio-8085-exec-2] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 13:53:42,859 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@1877300f, param1=null, param2=com.lj.blog.common.result.PageRequest@1877300f}[0m
2025-01-18 13:53:42,859 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit[0m
2025-01-18 13:53:42,863 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 13:53:42,919 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:53:42,919 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:53:42,919 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 56 ms
2025-01-18 13:53:42,919 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:53:42,921 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 13:53:42,921 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds[0m
2025-01-18 13:53:42,921 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 13:53:42,930 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:53:42,930 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:53:42,930 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 8 ms
2025-01-18 13:53:42,930 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:53:42,931 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}[0m
2025-01-18 13:53:42,931 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds[0m
2025-01-18 13:53:42,931 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 13:53:42,938 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:53:42,938 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:53:42,938 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 6 ms
2025-01-18 13:53:42,938 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:53:42,939 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}[0m
2025-01-18 13:53:42,939 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds[0m
2025-01-18 13:53:42,939 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 13:53:42,945 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:53:42,945 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:53:42,945 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 5 ms
2025-01-18 13:53:42,945 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:53:42,946 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 13:53:42,946 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds[0m
2025-01-18 13:53:42,947 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 13:53:42,952 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:53:42,952 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:53:42,952 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 5 ms
2025-01-18 13:53:42,952 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:53:42,954 INFO  [http-nio-8085-exec-2] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 13:53:42,974 INFO  [http-nio-8085-exec-2] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 13:53:42,981 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)[0m
2025-01-18 13:53:42,981 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count[0m
2025-01-18 13:53:42,981 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 13:53:42,984 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:53:42,984 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:53:42,984 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 13:53:42,984 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:53:42,999 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：569毫秒[0m
2025-01-18 13:54:05,227 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.ValidLoginInterceptor.(): saToken为：
2025-01-18 13:54:05,227 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /home/articles Method: POST Params: {}[0m
2025-01-18 13:54:05,229 INFO  [http-nio-8085-exec-3] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 13:54:05,230 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@2192920d, param1=null, param2=com.lj.blog.common.result.PageRequest@2192920d}[0m
2025-01-18 13:54:05,230 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit[0m
2025-01-18 13:54:05,230 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 13:54:05,238 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:54:05,238 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:54:05,238 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 执行时间: 8 ms
2025-01-18 13:54:05,238 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:54:05,239 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 13:54:05,239 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds[0m
2025-01-18 13:54:05,239 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 13:54:05,245 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:54:05,245 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:54:05,245 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 执行时间: 4 ms
2025-01-18 13:54:05,245 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:54:05,245 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}[0m
2025-01-18 13:54:05,245 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds[0m
2025-01-18 13:54:05,245 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 13:54:05,248 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:54:05,248 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:54:05,248 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 13:54:05,248 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:54:05,248 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}[0m
2025-01-18 13:54:05,248 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds[0m
2025-01-18 13:54:05,248 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 13:54:05,251 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:54:05,251 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:54:05,251 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 执行时间: 3 ms
2025-01-18 13:54:05,251 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:54:05,252 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 13:54:05,252 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds[0m
2025-01-18 13:54:05,252 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 13:54:05,255 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:54:05,255 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:54:05,255 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 执行时间: 1 ms
2025-01-18 13:54:05,255 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:54:05,255 INFO  [http-nio-8085-exec-3] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 13:54:05,256 INFO  [http-nio-8085-exec-3] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 13:54:05,257 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)[0m
2025-01-18 13:54:05,257 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count[0m
2025-01-18 13:54:05,257 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 13:54:05,258 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 13:54:05,258 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 13:54:05,258 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): 执行时间: 1 ms
2025-01-18 13:54:05,258 INFO  [http-nio-8085-exec-3] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 13:54:05,258 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：31毫秒[0m
2025-01-18 15:07:59,736 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 15:07:59,739 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 15:08:10,179 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 34780 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:08:10,185 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:08:10,645 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:08:10,647 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:08:10,680 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-01-18 15:08:11,116 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:08:11,126 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:08:11,133 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:08:11,133 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:08:11,202 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:08:11,202 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 985 ms
2025-01-18 15:08:12,375 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:08:12,697 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:08:12,709 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:08:12,714 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.866 seconds (process running for 3.805)
2025-01-18 15:08:53,317 INFO  [http-nio-8085-exec-2] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:08:53,317 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:08:53,318 INFO  [http-nio-8085-exec-2] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 15:08:53,340 WARN  [http-nio-8085-exec-2] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2025-01-18 15:08:54,304 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.ValidLoginInterceptor.(): saToken为：
2025-01-18 15:08:54,306 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /error Method: POST Params: {}[0m
2025-01-18 15:08:54,334 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：30毫秒[0m
2025-01-18 15:08:58,538 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.ValidLoginInterceptor.(): saToken为：
2025-01-18 15:08:58,538 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/error Method: GET Params: {}[0m
2025-01-18 15:08:58,553 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：15毫秒[0m
2025-01-18 15:09:52,229 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:09:56,511 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 40168 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:09:56,520 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:09:57,018 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:09:57,020 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:09:57,052 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-01-18 15:09:57,458 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:09:57,466 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:09:57,473 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:09:57,473 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:09:57,550 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:09:57,550 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 985 ms
2025-01-18 15:09:58,813 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:09:59,088 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:09:59,102 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:09:59,107 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.882 seconds (process running for 3.682)
2025-01-18 15:10:09,230 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:10:09,230 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:10:09,230 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 0 ms
2025-01-18 15:10:09,972 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.ValidLoginInterceptor.(): saToken为：
2025-01-18 15:10:09,974 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 15:10:10,005 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：32毫秒[0m
2025-01-18 15:13:48,834 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:13:53,804 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 24544 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:13:53,809 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:13:54,251 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:13:54,253 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:13:54,283 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 20 ms. Found 0 Redis repository interfaces.
2025-01-18 15:13:54,772 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:13:54,784 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:13:54,789 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:13:54,790 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:13:54,889 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:13:54,889 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1049 ms
2025-01-18 15:13:56,352 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:13:56,657 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:13:56,673 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:13:56,679 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 3.206 seconds (process running for 3.951)
2025-01-18 15:14:44,325 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:14:44,325 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:14:44,326 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 15:14:44,876 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 15:14:44,897 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：22毫秒[0m
2025-01-18 15:17:00,630 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:17:05,123 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 34168 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:17:05,129 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:17:05,581 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:17:05,583 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:17:05,614 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-01-18 15:17:06,031 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:17:06,038 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:17:06,044 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:17:06,044 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:17:06,110 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:17:06,110 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 951 ms
2025-01-18 15:17:07,261 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:17:07,554 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:17:07,569 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:17:07,575 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.743 seconds (process running for 3.61)
2025-01-18 15:17:12,797 INFO  [http-nio-8085-exec-3] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:17:12,797 INFO  [http-nio-8085-exec-3] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:17:12,798 INFO  [http-nio-8085-exec-3] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 15:17:13,336 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 15:17:13,361 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：27毫秒[0m
2025-01-18 15:23:28,818 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:23:34,131 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 29488 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:23:34,136 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:23:34,570 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:23:34,571 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:23:34,600 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-01-18 15:23:34,993 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:23:35,001 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:23:35,005 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:23:35,006 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:23:35,070 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:23:35,070 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 905 ms
2025-01-18 15:23:36,237 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:23:36,698 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:23:36,704 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.851 seconds (process running for 3.63)
2025-01-18 15:23:37,248 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:23:41,282 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 46496 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:23:41,290 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:23:41,802 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:23:41,805 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:23:41,833 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 18 ms. Found 0 Redis repository interfaces.
2025-01-18 15:23:42,265 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:23:42,277 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:23:42,282 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:23:42,283 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:23:42,355 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:23:42,355 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1021 ms
2025-01-18 15:23:43,746 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:23:44,092 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:23:44,105 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:23:44,111 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 3.133 seconds (process running for 3.799)
2025-01-18 15:24:08,381 INFO  [http-nio-8085-exec-5] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:24:08,381 INFO  [http-nio-8085-exec-5] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:24:08,382 INFO  [http-nio-8085-exec-5] o.s.w.s.DispatcherServlet.(): Completed initialization in 0 ms
2025-01-18 15:24:09,337 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 15:24:09,373 INFO  [http-nio-8085-exec-5] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：39毫秒[0m
2025-01-18 15:26:57,742 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:27:02,892 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 18572 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:27:02,897 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:27:03,408 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:27:03,410 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:27:03,440 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-01-18 15:27:03,915 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:27:03,927 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:27:03,931 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:27:03,931 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:27:04,010 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:27:04,010 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1078 ms
2025-01-18 15:27:05,395 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:27:05,696 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:27:05,711 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:27:05,717 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 3.195 seconds (process running for 4.085)
2025-01-18 15:27:42,693 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:27:42,693 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:27:42,694 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 15:27:43,559 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 15:27:43,586 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：30毫秒[0m
2025-01-18 15:28:10,077 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:28:14,768 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 44296 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:28:14,773 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:28:15,172 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:28:15,174 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:28:15,203 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-01-18 15:28:15,583 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:28:15,590 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:28:15,595 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:28:15,595 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:28:15,663 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:28:15,663 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 857 ms
2025-01-18 15:28:16,776 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:28:17,064 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:28:17,080 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:28:17,087 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.629 seconds (process running for 3.473)
2025-01-18 15:28:20,966 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:28:20,966 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:28:20,966 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 0 ms
2025-01-18 15:28:21,486 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 15:28:21,505 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：20毫秒[0m
2025-01-18 15:28:38,898 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 15:28:38,899 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：1毫秒[0m
2025-01-18 15:30:11,812 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:30:16,131 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 43628 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:30:16,138 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:30:16,639 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:30:16,641 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:30:16,693 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 37 ms. Found 0 Redis repository interfaces.
2025-01-18 15:30:17,275 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:30:17,284 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:30:17,288 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:30:17,289 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:30:17,351 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:30:17,351 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1178 ms
2025-01-18 15:30:18,531 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:30:18,836 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:30:18,850 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:30:18,856 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 3.022 seconds (process running for 3.683)
2025-01-18 15:30:24,460 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:30:24,461 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:30:24,462 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 15:30:25,038 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 15:30:25,053 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：18毫秒[0m
2025-01-18 15:31:24,437 WARN  [http-nio-8085-exec-3] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 15:32:16,450 WARN  [http-nio-8085-exec-4] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 15:32:39,772 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:32:43,621 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 11624 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:32:43,629 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:32:44,127 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:32:44,129 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:32:44,159 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 20 ms. Found 0 Redis repository interfaces.
2025-01-18 15:32:44,604 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:32:44,612 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:32:44,618 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:32:44,618 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:32:44,685 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:32:44,685 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1016 ms
2025-01-18 15:32:45,863 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:32:46,174 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:32:46,187 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:32:46,193 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.866 seconds (process running for 3.532)
2025-01-18 15:33:08,080 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:33:08,080 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:33:08,082 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 2 ms
2025-01-18 15:33:08,136 WARN  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 15:36:08,362 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:36:12,951 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 43920 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:36:12,959 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:36:13,395 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:36:13,396 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:36:13,425 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 20 ms. Found 0 Redis repository interfaces.
2025-01-18 15:36:13,827 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:36:13,835 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:36:13,839 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:36:13,840 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:36:13,905 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:36:13,905 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 910 ms
2025-01-18 15:36:15,034 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:36:15,324 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:36:15,335 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:36:15,341 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.724 seconds (process running for 3.408)
2025-01-18 15:36:40,993 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:36:40,993 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:36:40,995 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 2 ms
2025-01-18 15:36:41,038 WARN  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 15:36:51,039 WARN  [http-nio-8085-exec-4] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2025-01-18 15:36:51,053 WARN  [http-nio-8085-exec-4] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 15:38:02,126 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 15:38:06,648 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 7252 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:38:06,655 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:38:07,108 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:38:07,110 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:38:07,140 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-01-18 15:38:07,523 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:38:07,533 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:38:07,539 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:38:07,539 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:38:07,605 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:38:07,605 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 914 ms
2025-01-18 15:38:08,856 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:38:09,172 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:38:09,187 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:38:09,193 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.827 seconds (process running for 3.51)
2025-01-18 15:38:14,660 INFO  [http-nio-8085-exec-3] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:38:14,660 INFO  [http-nio-8085-exec-3] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:38:14,661 INFO  [http-nio-8085-exec-3] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 15:38:14,672 WARN  [http-nio-8085-exec-3] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2025-01-18 15:38:14,712 WARN  [http-nio-8085-exec-3] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 15:38:34,487 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /home/articles Method: POST Params: {}[0m
2025-01-18 15:38:34,614 INFO  [http-nio-8085-exec-2] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 15:38:34,992 INFO  [http-nio-8085-exec-2] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 15:38:35,048 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@595729af, param1=null, param2=com.lj.blog.common.result.PageRequest@595729af}[0m
2025-01-18 15:38:35,048 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit[0m
2025-01-18 15:38:35,050 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 15:38:35,142 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:38:35,142 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:38:35,142 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 91 ms
2025-01-18 15:38:35,142 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:38:35,146 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 15:38:35,146 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds[0m
2025-01-18 15:38:35,146 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 15:38:35,157 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:38:35,157 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:38:35,157 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 10 ms
2025-01-18 15:38:35,157 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:38:35,158 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}[0m
2025-01-18 15:38:35,158 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds[0m
2025-01-18 15:38:35,159 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 15:38:35,164 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:38:35,164 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:38:35,164 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 5 ms
2025-01-18 15:38:35,164 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:38:35,165 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}[0m
2025-01-18 15:38:35,165 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds[0m
2025-01-18 15:38:35,165 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 15:38:35,172 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:38:35,172 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:38:35,172 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 6 ms
2025-01-18 15:38:35,172 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:38:35,174 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 15:38:35,174 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds[0m
2025-01-18 15:38:35,174 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 15:38:35,179 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:38:35,179 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:38:35,179 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 4 ms
2025-01-18 15:38:35,179 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:38:35,180 INFO  [http-nio-8085-exec-2] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 15:38:35,202 INFO  [http-nio-8085-exec-2] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 15:38:35,214 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)[0m
2025-01-18 15:38:35,214 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count[0m
2025-01-18 15:38:35,214 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 15:38:35,219 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:38:35,219 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:38:35,219 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): 执行时间: 4 ms
2025-01-18 15:38:35,219 INFO  [http-nio-8085-exec-2] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:38:35,224 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：741毫秒[0m
2025-01-18 15:38:44,666 WARN  [http-nio-8085-exec-7] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' is not supported]
2025-01-18 15:38:44,668 WARN  [http-nio-8085-exec-7] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 15:42:12,366 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 15:42:12,374 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 15:42:16,776 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 30228 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 15:42:16,783 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 15:42:17,227 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 15:42:17,229 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 15:42:17,258 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 20 ms. Found 0 Redis repository interfaces.
2025-01-18 15:42:17,653 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 15:42:17,664 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 15:42:17,669 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 15:42:17,669 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 15:42:17,743 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 15:42:17,743 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 917 ms
2025-01-18 15:42:18,952 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 15:42:19,253 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 15:42:19,265 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 15:42:19,271 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.791 seconds (process running for 3.498)
2025-01-18 15:42:33,098 INFO  [http-nio-8085-exec-7] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 15:42:33,098 INFO  [http-nio-8085-exec-7] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 15:42:33,099 INFO  [http-nio-8085-exec-7] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 15:42:33,117 WARN  [http-nio-8085-exec-7] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2025-01-18 15:42:33,183 WARN  [http-nio-8085-exec-7] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 15:42:41,944 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /home/articles Method: POST Params: {}[0m
2025-01-18 15:42:42,008 INFO  [http-nio-8085-exec-4] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 15:42:42,203 INFO  [http-nio-8085-exec-4] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 15:42:42,236 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@6788da35, param1=null, param2=com.lj.blog.common.result.PageRequest@6788da35}[0m
2025-01-18 15:42:42,236 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit[0m
2025-01-18 15:42:42,237 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 15:42:42,290 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:42:42,290 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:42:42,292 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 执行时间: 53 ms
2025-01-18 15:42:42,292 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:42:42,293 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 15:42:42,293 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds[0m
2025-01-18 15:42:42,293 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 15:42:42,300 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:42:42,300 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:42:42,300 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 执行时间: 7 ms
2025-01-18 15:42:42,300 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:42:42,301 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}[0m
2025-01-18 15:42:42,301 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds[0m
2025-01-18 15:42:42,301 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 15:42:42,307 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:42:42,307 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:42:42,307 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 执行时间: 4 ms
2025-01-18 15:42:42,307 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:42:42,308 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}[0m
2025-01-18 15:42:42,308 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds[0m
2025-01-18 15:42:42,308 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 15:42:42,312 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:42:42,312 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:42:42,312 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 执行时间: 3 ms
2025-01-18 15:42:42,312 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:42:42,312 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 15:42:42,312 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds[0m
2025-01-18 15:42:42,312 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 15:42:42,318 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:42:42,318 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:42:42,318 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 执行时间: 5 ms
2025-01-18 15:42:42,318 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:42:42,319 INFO  [http-nio-8085-exec-4] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 15:42:42,334 INFO  [http-nio-8085-exec-4] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 15:42:42,339 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)[0m
2025-01-18 15:42:42,339 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count[0m
2025-01-18 15:42:42,339 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 15:42:42,342 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 15:42:42,342 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 15:42:42,342 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 15:42:42,342 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 15:42:42,345 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：402毫秒[0m
2025-01-18 18:40:28,200 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 18:40:28,202 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 18:40:34,211 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 5404 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 18:40:34,217 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 18:40:34,822 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 18:40:34,823 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 18:40:34,854 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-01-18 18:40:35,383 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 18:40:35,394 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 18:40:35,400 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 18:40:35,400 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 18:40:35,532 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 18:40:35,534 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 1232 ms
2025-01-18 18:40:37,134 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 18:40:37,508 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 18:40:37,525 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 18:40:37,531 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 3.685 seconds (process running for 4.616)
2025-01-18 18:41:00,939 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 18:41:00,939 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 18:41:00,939 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 0 ms
2025-01-18 18:41:00,959 WARN  [http-nio-8085-exec-1] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2025-01-18 18:41:00,978 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /error Method: POST Params: {}[0m
2025-01-18 18:41:01,022 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：47毫秒[0m
2025-01-18 18:57:41,036 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-0} closing ...
2025-01-18 18:57:45,557 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 38004 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 18:57:45,562 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 18:57:45,998 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 18:57:45,999 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 18:57:46,031 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 22 ms. Found 0 Redis repository interfaces.
2025-01-18 18:57:46,453 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 18:57:46,463 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 18:57:46,468 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 18:57:46,468 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 18:57:46,537 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 18:57:46,537 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 944 ms
2025-01-18 18:57:47,868 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 18:57:48,173 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 18:57:48,185 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 18:57:48,190 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.938 seconds (process running for 3.705)
2025-01-18 18:58:00,385 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 18:58:00,385 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 18:58:00,386 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 18:58:00,404 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /home/articles Method: POST Params: {}[0m
2025-01-18 18:58:00,502 INFO  [http-nio-8085-exec-1] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 18:58:00,764 INFO  [http-nio-8085-exec-1] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 18:58:00,799 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@e6aabb3, param1=null, param2=com.lj.blog.common.result.PageRequest@e6aabb3}[0m
2025-01-18 18:58:00,799 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit[0m
2025-01-18 18:58:00,800 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 18:58:00,847 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 18:58:00,847 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 18:58:00,847 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 46 ms
2025-01-18 18:58:00,847 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 18:58:00,851 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 18:58:00,851 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds[0m
2025-01-18 18:58:00,851 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 18:58:00,858 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 18:58:00,858 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 18:58:00,858 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 6 ms
2025-01-18 18:58:00,858 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 18:58:00,859 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}[0m
2025-01-18 18:58:00,859 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds[0m
2025-01-18 18:58:00,859 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 18:58:00,861 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 18:58:00,861 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 18:58:00,861 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 18:58:00,861 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 18:58:00,862 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}[0m
2025-01-18 18:58:00,862 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds[0m
2025-01-18 18:58:00,862 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 18:58:00,867 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 18:58:00,867 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 18:58:00,867 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 4 ms
2025-01-18 18:58:00,867 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 18:58:00,868 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 18:58:00,868 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds[0m
2025-01-18 18:58:00,868 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 18:58:00,871 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 18:58:00,871 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 18:58:00,871 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 3 ms
2025-01-18 18:58:00,871 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 18:58:00,871 INFO  [http-nio-8085-exec-1] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 18:58:00,895 INFO  [http-nio-8085-exec-1] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 18:58:00,900 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)[0m
2025-01-18 18:58:00,900 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count[0m
2025-01-18 18:58:00,900 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 18:58:00,902 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 18:58:00,902 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 18:58:00,902 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 18:58:00,902 INFO  [http-nio-8085-exec-1] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 18:58:00,915 INFO  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：514毫秒[0m
2025-01-18 18:58:09,064 WARN  [http-nio-8085-exec-10] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2025-01-18 18:58:09,071 INFO  [http-nio-8085-exec-10] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /error Method: POST Params: {}[0m
2025-01-18 18:58:09,083 INFO  [http-nio-8085-exec-10] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：12毫秒[0m
2025-01-18 18:58:55,524 WARN  [http-nio-8085-exec-3] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2025-01-18 18:58:55,525 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /error Method: POST Params: {}[0m
2025-01-18 18:58:55,525 INFO  [http-nio-8085-exec-3] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：0毫秒[0m
2025-01-18 18:59:06,535 WARN  [http-nio-8085-exec-6] o.s.w.s.m.s.DefaultHandlerExceptionResolver.(): Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported]
2025-01-18 18:59:06,537 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /error Method: POST Params: {}[0m
2025-01-18 18:59:06,537 INFO  [http-nio-8085-exec-6] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：0毫秒[0m
2025-01-18 18:59:27,366 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /test/hello Method: GET Params: {}[0m
2025-01-18 18:59:27,368 INFO  [http-nio-8085-exec-2] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): [94m>>> 执行了：2毫秒[0m
2025-01-18 19:03:29,247 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closing ...
2025-01-18 19:03:29,256 INFO  [SpringApplicationShutdownHook] c.a.d.p.DruidDataSource.(): {dataSource-1} closed
2025-01-18 19:03:33,694 INFO  [main] c.l.b.BlogApplication.(): Starting BlogApplication using Java 17.0.5 with PID 33996 (G:\SpringBootProduct\Blog\lj-blog-starter\target\classes started by PC in G:\SpringBootProduct\Blog)
2025-01-18 19:03:33,701 INFO  [main] c.l.b.BlogApplication.(): No active profile set, falling back to 1 default profile: "default"
2025-01-18 19:03:34,112 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-18 19:03:34,113 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-18 19:03:34,143 INFO  [main] o.s.d.r.c.RepositoryConfigurationDelegate.(): Finished Spring Data repository scanning in 19 ms. Found 0 Redis repository interfaces.
2025-01-18 19:03:34,536 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat initialized with port 8085 (http)
2025-01-18 19:03:34,544 INFO  [main] o.a.c.h.Http11NioProtocol.(): Initializing ProtocolHandler ["http-nio-8085"]
2025-01-18 19:03:34,549 INFO  [main] o.a.c.c.StandardService.(): Starting service [Tomcat]
2025-01-18 19:03:34,549 INFO  [main] o.a.c.c.StandardEngine.(): Starting Servlet engine: [Apache Tomcat/10.1.31]
2025-01-18 19:03:34,609 INFO  [main] o.a.c.c.C.[.[.[/].(): Initializing Spring embedded WebApplicationContext
2025-01-18 19:03:34,609 INFO  [main] o.s.b.w.s.c.ServletWebServerApplicationContext.(): Root WebApplicationContext: initialization completed in 879 ms
2025-01-18 19:03:35,739 INFO  [main] o.s.b.a.w.s.WelcomePageHandlerMapping.(): Adding welcome page template: index
2025-01-18 19:03:36,040 INFO  [main] o.a.c.h.Http11NioProtocol.(): Starting ProtocolHandler ["http-nio-8085"]
2025-01-18 19:03:36,052 INFO  [main] o.s.b.w.e.t.TomcatWebServer.(): Tomcat started on port 8085 (http) with context path '/'
2025-01-18 19:03:36,058 INFO  [main] c.l.b.BlogApplication.(): Started BlogApplication in 2.659 seconds (process running for 3.358)
2025-01-18 19:03:47,922 INFO  [http-nio-8085-exec-1] o.a.c.c.C.[.[.[/].(): Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-18 19:03:47,922 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Initializing Servlet 'dispatcherServlet'
2025-01-18 19:03:47,923 INFO  [http-nio-8085-exec-1] o.s.w.s.DispatcherServlet.(): Completed initialization in 1 ms
2025-01-18 19:03:47,977 WARN  [http-nio-8085-exec-1] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): startTime属性未设置或类型错误
2025-01-18 21:48:36,831 INFO  [http-nio-8085-exec-4] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /home/sentences Method: GET Params: {}[0m
2025-01-18 21:48:36,847 INFO  [http-nio-8085-exec-8] c.l.b.a.c.i.GlobalInterceptor.(): [96m>>>> 收到请求 - URI: /home/articles Method: POST Params: {}[0m
2025-01-18 21:48:37,126 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = BlogContentItems(id=null, type=null, content=null, createTime=null, updateTime=null, isDeleted=0)[0m
2025-01-18 21:48:37,126 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogContentItemsDao.queryPrimary[0m
2025-01-18 21:48:37,126 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_c ontent_items[0m
2025-01-18 21:48:37,449 INFO  [http-nio-8085-exec-4] c.a.d.p.DruidDataSource.(): {dataSource-1} inited
2025-01-18 21:48:38,108 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 21:48:38,108 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 21:48:38,108 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): 执行时间: 981 ms
2025-01-18 21:48:38,108 INFO  [http-nio-8085-exec-4] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 21:48:38,381 INFO  [http-nio-8085-exec-8] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInfo.pageRequest:{"offset":0,"pageNum":1,"pageSize":10}
2025-01-18 21:48:38,381 INFO  [http-nio-8085-exec-4] c.l.b.d.s.i.BlogContentItemsDomainServiceImp.(): BlogContentItemsDomainServiceImp.getAllSentences.boList:[{"content":"Wonder your life","type":1},{"content":"探索编程的无限可能","type":0},{"content":"Together, We Can Achieve More","type":0},{"content":"Success Starts with Self-Belief","type":0},{"content":"Every Day is a New Opportunity","type":0},{"content":"Turn Your Dreams into Plans","type":0},{"content":"用代码改变世界","type":0},{"content":"ljBlog. All Rights Reserved. 版权所有","type":2},{"content":"在 技术的海洋中探索前行，分享知识的乐趣，共同成长的喜悦","type":3}]
2025-01-18 21:48:38,462 WARN  [http-nio-8085-exec-4] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行时间过长：1712毫秒
2025-01-18 21:48:38,481 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {blogArticleBasicInfo=null, pageRequest=com.lj.blog.common.result.PageRequest@f3c1fdc, param1=null, param2=com.lj.blog.common.result.PageRequest@f3c1fdc}[0m
2025-01-18 21:48:38,481 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.queryAllByLimit[0m
2025-01-18 21:48:38,482 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select id, title, descripti on, reading_time, cover_image, article_status, create_time, is_deleted from blog_article_basic_info LIMIT 10 OFFSET 0[0m
2025-01-18 21:48:38,500 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 21:48:38,500 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 21:48:38,500 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 执行时间: 17 ms
2025-01-18 21:48:38,500 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 21:48:38,502 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {articleIds=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 21:48:38,502 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleCategoryLabelMappingDao.queryByArticleIds[0m
2025-01-18 21:48:38,502 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_categ ory_label_mapping where article_id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 21:48:38,509 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 21:48:38,509 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 21:48:38,510 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 执行时间: 6 ms
2025-01-18 21:48:38,510 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 21:48:38,511 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 3, 4, 5, 6], param1=[1, 3, 4, 5, 6]}[0m
2025-01-18 21:48:38,511 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogCategoryDao.queryByIds[0m
2025-01-18 21:48:38,511 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_categ ory where id in ( 1 , 3 , 4 , 5 , 6 ) and is_deleted = 0[0m
2025-01-18 21:48:38,514 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 21:48:38,514 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 21:48:38,514 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 执行时间: 3 ms
2025-01-18 21:48:38,514 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 21:48:38,516 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8, 9], param1=[1, 2, 3, 4, 5, 6, 7, 8, 9]}[0m
2025-01-18 21:48:38,516 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogLabelDao.queryByIds[0m
2025-01-18 21:48:38,516 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_label where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 )[0m
2025-01-18 21:48:38,522 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 21:48:38,522 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 21:48:38,522 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 执行时间: 5 ms
2025-01-18 21:48:38,522 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 21:48:38,523 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = {ids=[1, 2, 3, 4, 5, 6, 7, 8], param1=[1, 2, 3, 4, 5, 6, 7, 8]}[0m
2025-01-18 21:48:38,523 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleStatusDao.queryByIds[0m
2025-01-18 21:48:38,523 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select * from blog_article_status where id in ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 )[0m
2025-01-18 21:48:38,526 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 21:48:38,526 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 21:48:38,526 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 21:48:38,526 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 21:48:38,527 INFO  [http-nio-8085-exec-8] c.l.b.d.s.i.BlogArticleBasicDomainServiceImp.(): BlogArticleBasicDomainServiceImp.getBlogArticleBasicInf.boList[BlogArticleBasicInfoBo(id=1, title=Vue3 基础教程, description=深入学习Vue3的核心概念和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Thu Dec 19 05:43:13 CST 2024, readingTime=5, category=前端开发, labels=[Vue3], likes=21, views=12, comments=0, collections=0), BlogArticleBasicInfoBo(id=2, title=TypeScript 入门指南, description=详解TypeScript的基本语法和高级特性, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Fri Dec 20 07:24:28 CST 2024, readingTime=7, category=前端开发, labels=[Vue3, JavaScript], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=3, title=前端构建工具对比, description=深入对比Vite、Webpack和Rollup的特点和应用场景, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:09 CST 2024, readingTime=6, category=前端开发, labels=[Vue3, Vite], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=4, title=Docker容器化实践, description=详细讲解Docker的基本概念和实际应用案例, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:28:38 CST 2024, readingTime=8, category=数据库, labels=[Docker], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=5, title=React高级开发技巧, description=探索React的高级特性和性能优化方法, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:19 CST 2024, readingTime=10, category=前端开发, labels=[React], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=6, title=MongoDB数据库入门, description=学习MongoDB的基础操作和实践应用, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:29:54 CST 2024, readingTime=5, category=架构设计, labels=[MongoDB], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=7, title=微服务架构实践, description=探讨微服务架构的设计与实现方案, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:30:27 CST 2024, readingTime=7, category=开发工具, labels=[SpringBoot], likes=null, views=null, comments=null, collections=null), BlogArticleBasicInfoBo(id=8, title=AI编程助手指南, description=介绍主流的AI编程工具，如GitHub Copilot, coverImage=https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg, createTime=Sat Dec 21 02:31:05 CST 2024, readingTime=8, category=运维部署, labels=[AI开发, Cursor], likes=null, views=null, comments=null, collections=null)]
2025-01-18 21:48:38,547 INFO  [http-nio-8085-exec-8] c.l.b.a.c.c.BlogArticleInfoController.(): BlogArticleInfoController.getBlogArticleInfos.dto:[{"category":"前端开发","collections":0,"comments":0,"coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-19 05:43:13","description":"深入学习Vue3的核心概念和实践应用","id":1,"labels":["Vue3"],"likes":21,"readingTime":5,"title":"Vue3 基础教程","views":12},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-20 07:24:28","description":"详解TypeScript的基本语法和高级特性","id":2,"labels":["Vue3","JavaScript"],"readingTime":7,"title":"TypeScript 入门指南"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:09","description":"深入对比Vite、Webpack和Rollup的特点和应用场景","id":3,"labels":["Vue3","Vite"],"readingTime":6,"title":"前端构建工具对比"},{"category":"数据库","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:28:38","description":"详细讲解Docker的基本概念和实际应用案例","id":4,"labels":["Docker"],"readingTime":8,"title":"Docker容器化实践"},{"category":"前端开发","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:19","description":"探索React的高级特性和性能优化方法","id":5,"labels":["React"],"readingTime":10,"title":"React高级开发技巧"},{"category":"架构设计","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:29:54","description":"学习MongoDB的基础操作和实践应用","id":6,"labels":["MongoDB"],"readingTime":5,"title":"MongoDB数据库入门"},{"category":"开发工具","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:30:27","description":"探讨微服务架构的设计与实现方案","id":7,"labels":["SpringBoot"],"readingTime":7,"title":"微服务架构实践"},{"category":"运维部署","coverImage":"https://doctorpicture.oss-cn-beijing.aliyuncs.com/avatar/95520dd8-c8d8-4ebf-9807-ea166a7bcf56.jpg","createTime":"2024-12-21 02:31:05","description":"介绍主流的AI编程工具，如GitHub Copilot","id":8,"labels":["AI开发","Cursor"],"readingTime":8,"title":"AI编程助手指南"}]
2025-01-18 21:48:38,557 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 参数 = BlogArticleBasicInfo(id=null, title=null, description=null, readingTime=null, coverImage=null, articleStatus=null, createTime=null, isDeleted=0)[0m
2025-01-18 21:48:38,557 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 调用方法 = com.lj.blog.infra.basic.dao.BlogArticleBasicInfoDao.count[0m
2025-01-18 21:48:38,557 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [93m>>>> 使用的完整的SQL:
select count(1) from blog_article_basic_info WHERE is_deleted = 0[0m
2025-01-18 21:48:38,560 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): [32mSQL 执行时间:
2025-01-18 21:48:38,560 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 方法: query
2025-01-18 21:48:38,560 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): 执行时间: 2 ms
2025-01-18 21:48:38,560 INFO  [http-nio-8085-exec-8] BLOG-SYSTEM-SQL.(): ========================================[0m
2025-01-18 21:48:38,560 WARN  [http-nio-8085-exec-8] c.l.b.a.c.i.StatisticsAccessInterfaceTime.(): 执行时间过长：1714毫秒
